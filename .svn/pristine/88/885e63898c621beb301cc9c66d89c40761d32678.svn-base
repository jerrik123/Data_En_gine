package com.mangocity.de.mbr.datafactory;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

import com.mangocity.ce.bean.EngineBean;
import com.mangocity.ce.book.ErrorBook;
import com.mangocity.ce.exception.BusinessException;
import com.mangocity.ce.exception.DatabaseException;
import com.mangocity.ce.exception.ExceptionAbstract;
import com.mangocity.ce.exception.IllegalParamException;
import com.mangocity.ce.exception.SystemException;
import com.mangocity.ce.util.AssertUtils;
import com.mangocity.ce.util.CommonUtils;
import com.mangocity.ce.util.New;
import com.mangocity.de.mbr.book.ErrorConstant;
import com.mangocity.de.mbr.book.SqlMapper;
import com.mangocity.de.mbr.book.SqlMapper.TransacOperation;
import com.mangocity.de.mbr.util.ConstantArgs;
import com.mangocity.de.mbr.util.SqlUtil;
import com.mangocity.de.mbr.util.Tools;

/**
 * @ClassName: PointFactory
 * @Description: (积分数据工厂)
 * @author YangJie
 * @date 2015年8月25日 下午6:19:22
 */
public class PointFactory {
	private static final Logger log = Logger.getLogger(PointFactory.class);

	/**
	 * @Title: cutPoint
	 * @Description: 扣减积分
	 * @param pb
	 * @param @throws ExceptionAbstract 参数说明
	 * @return Map 返回类型
	 */
	public Map<String, Object> cutPoint(EngineBean pb) throws ExceptionAbstract {
		log.info("PointFactory cutPoint begin()...");
		AssertUtils.assertNull(pb, "EngineBean can't be null.");
		Map<String, Object> headMap = pb.getHeadMap();
		log.info("PointFactory cutPoint headMap: " + headMap);
		Map<String,Object> mbrMap = null;
		Long mbrId = CommonUtils.objectToLong(headMap.get("mbrId"), -1L);
		if(CommonUtils.isEmpty(mbrId) || mbrId == -1L){
			mbrMap = SqlUtil.getInstance().selectOne("queryMbrByMbrshipCd", headMap);//根据会籍查询会员信息
			if(null == mbrMap){
				log.info("mbr: " + mbrMap + "mbrshipCd: " + headMap.get("mbrshipCd"));
				throw new BusinessException(this, ErrorConstant.Mbr.ERROR_MBR_NOT_EXIST_30001, "根据会籍查询不到该会员");
			}
			mbrId = CommonUtils.objectToLong(mbrMap.get("mbrId"), -1L);
			headMap.put("mbrId",mbrId);
		}
		mbrMap = SqlUtil.getInstance().selectOne("queryMbrByMbrId", headMap);
		if(null == mbrMap){
			log.info("mbr: " + mbrMap + "mbrId: " + headMap.get("mbrId"));
			throw new BusinessException(this, ErrorConstant.Mbr.ERROR_MBR_NOT_EXIST_30001, "根据该mbrId查询不到会员");
		}
		String attribute = String.valueOf(mbrMap.get("attribute"));// 会员类型 0是普通会员 // 1是集团会员
		log.info("mbrId: " + mbrId + (("0".equals(attribute))?"->芒果网本地会员":"->集团会员"));
		if (CommonUtils.isNotBlank(attribute)) {// 普通会员
			if (ConstantArgs.MBR_ATTRIBUTE_CUSTOMER.equals(attribute)) {// 普通会员
				//芒果本地扣减 核心入口
				mangoCutPoint(headMap);
			} else if (ConstantArgs.MBR_ATTRIBUTE_MBR.equals(attribute)) {// 集团
				//TODO crmCutPoint(headMap,pb.getBodyMap());
				throw new BusinessException(this, ErrorConstant.Mbr.ERROR_CRM_MBR_NOT_SUPPORT_POINT_CUT_30008, "该会员是集团会员,暂不支持积分扣减");
			}
		}
		Map<String,Object> resultMap = resultMap = New.map();
		resultMap.put("cutPointSucc", true);
		return resultMap;
	}
	
	/**
	 * sb.append("mbrId:").append(pointAdjustmentBean.getMbrId()).append(",")
	  .append("mbrshipCd:").append(pointAdjustmentBean.getMbrshipCd()).append(",")
	  .append("adjustType:").append(pointAdjustmentBean.getAdjustType()).append(",")

.append("adjustReasonCode:").append(pointAdjustmentBean.getAdjustReasonCode()).append(",")
	  .append("transType:").append(pointAdjustmentBean.getTransType()).append(",")
	  .append("transStatus:").append(pointAdjustmentBean.getTransStatus()).append(",")
	  .append("transDateTime:").append(pointAdjustmentBean.getTransDateTime()).append(",")
	  .append("points:").append(pointAdjustmentBean.getPoints()).append(",")
	  .append("transactionChannel:").append(pointAdjustmentBean.getTransactionChannel()).append(",")
	  .append("ctsPointSubType:").append(pointAdjustmentBean.getcTSPointSubType()).append(",")
	  .append("ctsTransactionChannelSN:").append(pointAdjustmentBean.getcTSTransactionChannelSN()).append(",")
	  .append("ctsTransactionOrgCode:").append(pointAdjustmentBean.getcTSTransactionOrgCode()).append(",")
	  .append("partNumber:").append(pointAdjustmentBean.getPartNumber()).append(",")
	  .append("ctsProdCode:").append(pointAdjustmentBean.getcTSProdCode()).append(",")
	  .append("ctsProdDesc:").append(pointAdjustmentBean.getcTSProdDesc());
	   pointLog.debug("订单号:"+salesTransNo + " start increasePoint : " + sb.toString());
	 * @Title: increasePoint
	 * @Description: 积分退还
	 * @param pb
	 * @param @throws ExceptionAbstract 参数说明
	 * @return Map 返回类型
	 */
	public Map<String, Object> increasePoint(EngineBean pb) throws ExceptionAbstract {
		log.info("PointFactory increasePoint begin()...");
		AssertUtils.assertNull(pb, "EngineBean can't be null.");
		Map<String, Object> headMap = pb.getHeadMap();
		log.info("PointFactory increasePoint headMap: " + headMap);
		//step1:判断是芒果网会员还是集团会员
		Long mbrId = CommonUtils.objectToLong(headMap.get("mbrId"), -1L);
		String mbrshipCd = String.valueOf(headMap.get("mbrshipCd"));
		
		//step2:如果是集团会员,则进行集团积分退还,否则就是芒果网本地退还
		if(isCrmMbr(headMap)){//如果根据会籍信息或者mbrId查询不到会员,则会抛出会员不存在自定义异常
			increaseCrmPoint(headMap);
		}else{
			increaseMangoPoint(headMap);
		}
		//step3:
		Map<String,Object> resultMap = resultMap = New.map();
		resultMap.put("increasePointSucc", true);
		return resultMap;
	}
	
	//芒果网本地退还积分 TODO
	private void increaseMangoPoint(Map<String, Object> headMap) throws ExceptionAbstract {
		log.info("increaseMangoPoint...begin()...param: " + headMap);
		Long points = CommonUtils.objectToLong(headMap.get("points"), -1L);
		String salesTransNo = String.valueOf(headMap.get("salesTransNo"));
		if(points<=0){
			throw new BusinessException(this, ErrorConstant.Point.ERROR_CUT_POINTS_LESS_THAN_ZERO_20008, "积分数必须大于0");
		}
		Long mbrId = CommonUtils.objectToLong(headMap.get("mbrId"), -1L);
		log.info(String.format("正在退还积分【mbrId: %s,salesTransNo： %s ,points: %s】", mbrId,headMap.get("salesTransNo"),headMap.get("points")));
		
		//step1: 如果指定的参数没有传入,则设置为默认值
		setDefaultValueIfNull(headMap);
		
		/********防止出现退还积分大于扣减的情况*********/
		try {
		//step2: 根据订单号获取该笔订单已经退还的积分和实际扣除的积分
			if (CommonUtils.isNotBlank(salesTransNo) && !salesTransNo.startsWith("CTP")) {//CTP 开头的订单号代表现金转积分的订单，不做校验
				Long sumPayment = (Long) SqlUtil.getInstance().selectOneString("getSumPaymentByOrderNo", headMap);//获取该笔订单实际扣减的积分总数
				Long sumRefund = (Long) SqlUtil.getInstance().selectOneString("getSumRefundByOrderNo", headMap);//获取已经退还的积分数
				log.info("salesTransNo: " + headMap.get("salesTransNo") + " ,该订单扣减的积分数是: " + sumPayment
						+ " ,已经退还的积分是: " + sumRefund + " ,本次要退还的积分: " + points);
				if (null == sumPayment) {
					sumPayment = 0L;
				}
				if (null == sumRefund) {
					sumRefund = 0L;
				}

				//step3:如果退还积分大于扣减,则直接抛出自定义异常
				if (points + sumRefund > sumPayment) {
					throw new BusinessException(this, ErrorConstant.Point.ERROR_POINT_REFUND_MORETHAN_CUT_20011,
							"退还积分大于扣减积分");
				}
			}
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new SystemException(this, ErrorBook.OTHER_ERROR, "数据库查询错误");
		}
		
		//step3:根据mbrId查询积分账户信息
		Map<String,Object> pointAccountMap = SqlUtil.getInstance().selectOne("queryPointAccountByMbrId", headMap);
		validPointAccount(pointAccountMap);//校验积分账户
		
		//step4:开始退还积分
		operateMbrPoint(headMap,ConstantArgs.LOY_TXN_TYPE_CD_ACCRUAL,
				ConstantArgs.POINT_TRANS_ATTRIBUTE_MANGOCTIY,false);
		
		log.info("increaseMangoPoint end()...");
	}

	private void setDefaultValueIfNull(Map<String, Object> headMap) {
		if(CommonUtils.isBlankIncludeNull(String.valueOf(headMap.get("transType")))){
			headMap.put("transType", ConstantArgs.POINT_TRANS_TYPE_ADJUSTMENT);
		}
		if(CommonUtils.isBlankIncludeNull(String.valueOf(headMap.get("adjustType")))){
			headMap.put("adjustType", ConstantArgs.POINT_INT_ADJUSTTYPE);
		}
		if(CommonUtils.isBlankIncludeNull(String.valueOf(headMap.get("transStatus")))){
			headMap.put("transStatus", ConstantArgs.POINT_INT_TRANSSTATUS);
		}
		if(CommonUtils.isBlankIncludeNull(String.valueOf(headMap.get("cTSPointSubType")))){
			headMap.put("cTSPointSubType", ConstantArgs.CTS_CONSUME_POINT_SUB_TYPE);
		}
	}

	//集团退还积分
	private void increaseCrmPoint(Map<String, Object> headMap) throws BusinessException {
		log.info("increaseCrmPoint...begin()");
		throw new BusinessException(this, ErrorConstant.Mbr.ERROR_CRM_MBR_NOT_SUPPORT_POINT_CUT_30008, "该会员是集团会员,暂不支持积分退还");
	}

	//判断是否为集团会员 如果是集团会员,返回true,否则返回false
	private boolean isCrmMbr(Map<String, Object> headMap) throws ExceptionAbstract {
		Long mbrId = CommonUtils.objectToLong(headMap.get("mbrId"), -1L);
		Map<String, Object> mbrMap = null;
		Map<String, Object> mbrshipMap = null;
		if(mbrId.intValue() != -1){
			mbrMap = SqlUtil.getInstance().selectOne("queryMbrByMbrId", headMap);
		}
		if(null == mbrMap){
			mbrshipMap = SqlUtil.getInstance().selectOne("queryMbrShipByMbrshipCd", headMap);
			if(null != mbrshipMap){
				headMap.put("mbrId", mbrshipMap.get("MBR_ID"));
				mbrMap = SqlUtil.getInstance().selectOne("queryMbrByMbrId", headMap);
				if(null == mbrMap){
					log.info("mbrId: " + headMap.get("mbrId"));
					throw new BusinessException(this, ErrorConstant.Mbr.ERROR_MBR_NOT_EXIST_30001, "根据该mbrId查询不到会员");
				}
			}
		}
		String attribute = String.valueOf(mbrMap.get("attribute"));
		if(log.isDebugEnabled()){
			log.debug("PointFactory isCrmMbr mbrMap: " + mbrMap);
		}
		if(!"null".equals(attribute) && "1".equals(attribute.trim())){
			return true;
		}
		return false;
	}

	/**
	 * @Title: queryEnabledPoint
	 * @Description: 查询可用积分
	 * @param pb
	 * @param @throws ExceptionAbstract 参数说明
	 * @return Map 返回类型
	 */
	public Map<String,Object> queryEnabledPoint(EngineBean pb) throws ExceptionAbstract {
		log.info("PointFactory queryEnabledPoint begin()...");
		AssertUtils.assertNull(pb, "EngineBean can't be null.");
		Map<String, Object> headMap = pb.getHeadMap();
		log.info("headMap: " + headMap);
		Long mbrId = CommonUtils.strToLong((String)headMap.get("mbrId"), -1);
		String mbrshipCd = (String) headMap.get("mbrshipCd");
		if(CommonUtils.isEmpty(mbrId)){
			if(CommonUtils.isNotBlank(mbrshipCd)){
				Map<String,Object> mbrMap = SqlUtil.getInstance().selectOne("queryMbrByMbrshipCd", headMap);
				if(CommonUtils.isEmpty(mbrMap)){
					log.info("queryMbrByMbrshipCd会员账户为空");
					throw new BusinessException(this, ErrorConstant.Mbr.ERROR_MBR_NOT_EXIST_30001, "会员账户不存在");
				}
				log.info("mbrId: " + mbrId);
				headMap.put("mbrId",mbrMap.get("mbrId"));
			}
		}
		Map<String,Object> pointAccountMap = SqlUtil.getInstance().selectOne("queryPointAccountByMbrId", headMap);
		validPointAccount(pointAccountMap);
		pointAccountMap = SqlUtil.getInstance().selectOne("queryPointAccountByCondition", headMap);
		if(CommonUtils.isEmpty(pointAccountMap)){
		   log.info("积分账户不存在 queryPointAccountByCondition...param: " + headMap + "result: " + pointAccountMap );
		   throw new BusinessException(this, ErrorConstant.Point.ERROR_ACCOUNT_NOT_EXIST_20002, "积分账户不存在");
		}
		log.info("mbrId: " + mbrId + ",可用积分: " + pointAccountMap.get("pointTotal"));
		return pointAccountMap;
	}

	private void validPointAccount(Map<String, Object> pointAccountMap) throws IllegalParamException, BusinessException {
		log.info("积分账户信息:" + pointAccountMap);
		AssertUtils.assertNull(pointAccountMap, "不存在该会员id对应的积分账户信息");
		int stus = ((BigDecimal)pointAccountMap.get("stus")).intValue();
		if(stus == 2){
			log.info(pointAccountMap + "积分账户已冻结");
			throw new BusinessException(this, ErrorConstant.Point.ERROR_POINT_ACCOUNT_FREEZE_20005, "积分账户已冻结");
		}else if(stus == 3){
			log.info(pointAccountMap +"积分账户已注销");
			throw new BusinessException(this, ErrorConstant.Point.ERROR_POINT_ACCOUNT_Logout_20006, "积分账户已注销");
		}else if(stus == 0){
			log.info(pointAccountMap + "积分账户未激活");
			throw new BusinessException(this, ErrorConstant.Point.ERROR_POINT_ACCOUNT_NOT_ACCTIVATED_20007, "积分账户未激活");
		}
	}
	
	/**
	 * @Title: queryPointTransaction
	 * @Description: 查询积分交易明细
	 * @param pb {"accountId":"20551682","endDate":"2015-10-01""beginDate":"2001-10-01","startNum":""}
	 * @param @throws ExceptionAbstract 参数说明
	 * @return Map 返回类型
	 */
	public List<Map<String,Object>> queryPointTransaction(EngineBean pb) throws ExceptionAbstract {
		log.info("PointFactory queryPointTransaction begin()...");
		AssertUtils.assertNull(pb, "EngineBean can't be null.");
		Map<String, Object> headMap = pb.getHeadMap();
		log.info("headMap: " + headMap);
		Long pageNo = CommonUtils.objectToLong((String)pb.getHead("pageNo"), -1L);
		Long pageSize = CommonUtils.objectToLong((String)pb.getHead("pageSize"), -1L);
		Long startNum = (pageNo - 1) * pageSize;
		Long endNum = startNum + pageSize;
		headMap.put("startNum", startNum);
		headMap.put("endNum", endNum);
		List<Map<String,Object>> dataList = SqlUtil.getInstance().selectList("queryPointTransactionByPagination", headMap);
		log.info("积分明细: "+"startNum: " + startNum + ",endNum: " + endNum + " details: " + dataList);
		for(Map<String,Object> dataMap : dataList){
			if(ConstantArgs.POINT_TRANS_TYPE_RECHARGE.equals(dataMap.get("transType"))){
				dataMap.put("adjustType", "积分充值");
			}else if(ConstantArgs.POINT_TRANS_TYPE_AWARD.equals(dataMap.get("transType"))){
				dataMap.put("adjustType", "奖励积分");
			}else if(ConstantArgs.POINT_TRANS_TYPE_ADJUSTMENT.equals(dataMap.get("transType"))){
				dataMap.put("adjustType", "积分消费");
			}else if(ConstantArgs.POINT_TRANS_TYPE_CONVERT.equals(dataMap.get("transType"))){
				dataMap.put("adjustType", "积分兑换");
			}else if(ConstantArgs.POINT_TRANS_TYPE_ADJUST.equals(dataMap.get("transType"))){
				dataMap.put("adjustType", "调整积分");
			}
		}
		return dataList;
	}
	
	/**
	 * @Title: addAwardPoints
	 * @Description: 添加积分奖励
	 * @param pb 
	    point_award_temp_id int,
		mbrId,
		mbrshipCd,
		order_trans_code,---订单类型(机票、酒店、度假)
		order_src,--订单来源
		points_convert_modulus,--积分兑换系数
		order_num,--订单号
		sale_trans_amount,--交易总额(非积分、代金券支付额)
		award_points,--奖励积分数
		status,--是否成功
		remark
	 * @param @throws ExceptionAbstract 参数说明
	 * @return Map 返回类型
	 */
	public synchronized Map<String, Object> addAwardPoints(EngineBean pb) throws ExceptionAbstract {
		log.info("PointFactory addAwardPoints begin()...");
		AssertUtils.assertNull(pb, "EngineBean can't be null.");
		Map<String, Object> inMap = new HashMap<String, Object>();
		log.info("headMap: " + pb.getHeadMap());
		
		//#step1:判断该笔订单是否已经奖励了
		hasAwarded(String.valueOf(pb.getHead("order_num")));
		
		Long mbrId = CommonUtils.objectToLong(pb.getHead("mbrId"), -1L);
		String mbrshipCd = (String)pb.getHead("mbrshipCd");
		Map<String,Object> mbrMap = null;
		SqlMapper sqlMapper = null;
		List<SqlMapper> sqlMapperList = new ArrayList<SqlMapper>();//事务处理列表*/		
		if(mbrId == -1L) {
			throw new BusinessException(this, ErrorConstant.Mbr.ERROR_MBR_NOT_EXIST_30001, "不存在该mbrId");
		}
		if(CommonUtils.isBlank(mbrshipCd)){//如果没有传入会籍编码,则根据mbrId查到默认的会籍编码
			mbrMap = SqlUtil.getInstance().selectOne("queryMbrByMbrId", pb.getHeadMap());
			if(null == mbrMap){
				throw new BusinessException(this, ErrorConstant.Mbr.ERROR_MBR_NOT_EXIST_30001, "会员不存在");
			}
			mbrshipCd = (String)mbrMap.get("defaultMbrshipCd");
		}
		
		//1.新增积分奖励
		inMap.put("salesTransCode", pb.getHead("sales_trans_code"));//5代表跟团游
		inMap.put("merchantAccNo", "MANGO");
		//TODO scheme_id
		//TODO渠道
		inMap.put("salesBookingNo", pb.getHead("order_num"));
		inMap.put("salesTransNo", pb.getHead("order_num"));
		inMap.put("salesTransAmount", pb.getHead("sales_trans_amount"));
		inMap.put("salesTransForeignAmount", pb.getHead("sales_trans_amount"));
		//TODO SALE_QTY
		//TODO付款方式
		inMap.put("createBy", "MEMBER API");
		Long tranId = (Long) SqlUtil.getInstance().selectOneString("queryPointTranId", null);
		inMap.put("pointTransactionId", tranId);
		log.info("新增积分奖励 begin... " + inMap.toString());
		sqlMapper = SqlMapper.getInstance().sqlId("pointAwardCreate").sqlType(TransacOperation.INSERT).paramMap(inMap).build();
		sqlMapperList.add(sqlMapper);
		
		
		//先根据mbrId查到积分账户总额
		Map<String,Object> pointAccountMap = SqlUtil.getInstance().selectOne("queryPointAccountByMbrId", pb.getHeadMap());
		log.info("根据mbrId： " + pb.getHead("mbrId") + " ,查询积分账户信息: " + pointAccountMap);
		if(null == pointAccountMap){
			throw new BusinessException(this, ErrorConstant.Point.ERROR_ACCOUNT_NOT_EXIST_20002, "找不到mbrId: "+pb.getHead("mbrId")+" 对应的积分账户");
		}
		int stus = ((BigDecimal)pointAccountMap.get("stus")).intValue();
		if(stus == 2){
			log.info(pointAccountMap + "积分账户已冻结");
			throw new BusinessException(this, ErrorConstant.Point.ERROR_POINT_ACCOUNT_FREEZE_20005, "积分账户已冻结");
		}else if(stus == 3){
			log.info(pointAccountMap +"积分账户已注销");
			throw new BusinessException(this, ErrorConstant.Point.ERROR_POINT_ACCOUNT_Logout_20006, "积分账户已注销");
		}else if(stus == 0){
			log.info(pointAccountMap + "积分账户未激活");
			throw new BusinessException(this, ErrorConstant.Point.ERROR_POINT_ACCOUNT_NOT_ACCTIVATED_20007, "积分账户未激活");
		}
		Long pointTotal = CommonUtils.objectToLong(pointAccountMap.get("pointTotal"), -1L);
		if(pointTotal == -1L){
			throw new DatabaseException(this, ErrorConstant.ERROR_PARAM_NULL_10000, "查询积分账户余额出错");
		}
		
		log.info("更新积分账户 begin...当前剩余积分: " + pointTotal);
		//2.更新积分账户表
		Long awardPoints = CommonUtils.objectToLong(pb.getHead("award_points"), -1L);
		if(-1L != awardPoints && awardPoints.intValue()>0){
			pointTotal = pointTotal + awardPoints;
		}else{
			throw new DatabaseException(this, ErrorConstant.ERROR_PARAM_NULL_10000, "积分奖励数必须大于0");
		}
		log.info("积分奖励数: " + awardPoints);
		inMap.put("pointTotal", pointTotal);
		inMap.put("updateBy", "MEMBER API");
		inMap.put("mbrId", mbrId);
		sqlMapper = SqlMapper.getInstance().sqlId("updatePointAccoount").sqlType(TransacOperation.UPDATE).paramMap(inMap).build();
		sqlMapperList.add(sqlMapper);
		
		//3.操作积分余额
		log.info("操作积分余额 operatePointBalance begin...");
		Long pointAccountId = CommonUtils.objectToLong(pointAccountMap.get("pointAccountId"), -1L);
		
		/********操作积分余额********/
		operatePointBalance(sqlMapperList,mbrId, pointAccountId, "MEMBER API", ConstantArgs.LOY_TXN_TYPE_CD_ACCRUAL, awardPoints, null);
		
		//4.插入积分流水
		log.info("插入积分交易流水");
		inMap.put("accountId", pointAccountId);
		inMap.put("csn", mbrId);
		inMap.put("transType", "A");
		inMap.put("mbrshipId", pb.getHead("mbrshipId"));
		inMap.put("mbrshipCd", pb.getHead("mbrshipCd"));
		inMap.put("transPointValue", awardPoints);
		inMap.put("transAttribute", 0);
		inMap.put("transStatus", "P");
		inMap.put("createBy", "MEMBER API");
		
		sqlMapper = SqlMapper.getInstance().sqlId("insertPointTransaction").sqlType(TransacOperation.INSERT).paramMap(inMap).build();
		sqlMapperList.add(sqlMapper);
		
		//执行事务操作
		Map<String,Object> resultMap = new HashMap<String, Object>();
		try {
			SqlUtil.getInstance().transactionAll(sqlMapperList);
			resultMap.put("isSuccess", true);
			log.info("添加奖励积分成功...返回成功状态");
			return resultMap;
		} catch (Exception e) {
			log.error("添加奖励积分失败...返回失败状态 " + e.getMessage(),e);
			ExceptionAbstract abstracException = (ExceptionAbstract)e;
			throw new BusinessException(this, ErrorConstant.ERROR_TRANSACTION_ROLL_BACK_10006,abstracException.getErrorMsg());
		}
	}

	//判断订单是否已经被奖励
	private void hasAwarded(String orderNum) throws ExceptionAbstract {
		log.info("orderNum: " + orderNum);
		Map<String,Object> paramMap = New.map();
		paramMap.put("orderNum", orderNum);
		long awardedCount = CommonUtils.objectToLong(SqlUtil.getInstance().selectOneString("queryAwardCountByOrderNum", paramMap), -1L);
		if(awardedCount>=1){
			throw new BusinessException(this, ErrorConstant.Point.ERROR_POINT_AWARDED_20010, "该笔订单号已经奖励积分");
		}
	}

	// 芒果本地积分扣减
	private void mangoCutPoint(Map<String, Object> headMap) throws ExceptionAbstract {
		log.info("mangoCutPoint begin()...");
		Long points = CommonUtils.objectToLong(headMap.get("points"), -1L);
		if(points.intValue()<=0){
			log.info("points: " + headMap.get("points"));
			throw new BusinessException(this, ErrorConstant.Point.ERROR_CUT_POINTS_LESS_THAN_ZERO_20008, "扣减积分数额不能小于0");
		}
		if(CommonUtils.isBlank((String)headMap.get("transType"))){
			headMap.put("transType", ConstantArgs.POINT_TRANS_TYPE_ADJUSTMENT);
		}
		if(CommonUtils.isBlank((String)headMap.get("adjustType"))){
			headMap.put("adjustType", ConstantArgs.POINT_INT_ADJUSTTYPE);
		}
		if(CommonUtils.isBlank((String)headMap.get("transStatus"))){
			headMap.put("transStatus", ConstantArgs.POINT_INT_TRANSSTATUS);
		}
		if(CommonUtils.isBlank((String)headMap.get("cTSPointSubType"))){//TODO
			headMap.put("cTSPointSubType", ConstantArgs.CTS_USER_POINT_SUB_TYPE);
		}
		headMap.put("adjustReasonCode",1130L);
		headMap.put("transactionSubType","Product");
		log.info("mangoCutPoint参数: " + headMap);
		Map<String,Object> pointAccountMap = SqlUtil.getInstance().selectOne("queryPointAccountByMbrId", headMap);
		int stus = ((BigDecimal)pointAccountMap.get("stus")).intValue();
		if(stus == 2){
			log.info(pointAccountMap + "积分账户已冻结");
			throw new BusinessException(this, ErrorConstant.Point.ERROR_POINT_ACCOUNT_FREEZE_20005, "积分账户已冻结");
		}else if(stus == 3){
			log.info(pointAccountMap +"积分账户已注销");
			throw new BusinessException(this, ErrorConstant.Point.ERROR_POINT_ACCOUNT_Logout_20006, "积分账户已注销");
		}else if(stus == 0){
			log.info(pointAccountMap + "积分账户未激活");
			throw new BusinessException(this, ErrorConstant.Point.ERROR_POINT_ACCOUNT_NOT_ACCTIVATED_20007, "积分账户未激活");
		}
		AssertUtils.assertNull(pointAccountMap,"积分账户为Null");
		if(((BigDecimal)pointAccountMap.get("stus")).intValue() != 1){
			log.info("stus: " + pointAccountMap.get("stus"));
			throw new BusinessException(this, ErrorConstant.Point.ERROR_STUS_INVALID_20001, "积分状态无效stus!=1");
		}
		log.info("开始扣减积分...");
		Long result = Long.valueOf(0);
		
		/********操作会员积分 核心方法********/
		operateMbrPoint(headMap,ConstantArgs.LOY_TXN_TYPE_CD_REDEMPTION,
				ConstantArgs.POINT_TRANS_ATTRIBUTE_MANGOCTIY,false);
		log.info("--------------扣减积分------stop---------------:"+result);
	}
	
	//操作会员积分
	@SuppressWarnings("unused")
	private void operateMbrPoint(Map<String, Object> headMap,
			String adjustReasonCode, String transAttribute,
			boolean isCrm) throws ExceptionAbstract {
		log.info("operatMbrPoint begin()...");
		String transType = (String)headMap.get("transType");
		String updateBy = (String)headMap.get("updateBy");
		Long mbrId = CommonUtils.objectToLong(headMap.get("mbrId"), -1L);
		Long transPointValue = CommonUtils.objectToLong(headMap.get("points"), -1L);
		Long accountId = -1L;
		Long pointTotal = null;
		Long targetVersion = null;
		boolean operateFlag = false;
		boolean transactionFlag = false;
		Long operateAfterVersion = null;
		Long tranId = null;
		
		//处理事务
		SqlMapper sqlMapper = null;
		List<SqlMapper> sqlMapperList = new ArrayList<SqlMapper>();
		Map<String,Object> transactionMap = new HashMap<String, Object>();
		Map<String,Object> pointAccountMap = SqlUtil.getInstance().selectOne("queryPointAccountByMbrId", headMap);
		int stus = ((BigDecimal)pointAccountMap.get("stus")).intValue();
		if(stus == 2){
			log.info(pointAccountMap + "积分账户已冻结");
			throw new BusinessException(this, ErrorConstant.Point.ERROR_POINT_ACCOUNT_FREEZE_20005, "积分账户已冻结");
		}else if(stus == 3){
			log.info(pointAccountMap +"积分账户已注销");
			throw new BusinessException(this, ErrorConstant.Point.ERROR_POINT_ACCOUNT_Logout_20006, "积分账户已注销");
		}else if(stus == 0){
			log.info(pointAccountMap + "积分账户未激活");
			throw new BusinessException(this, ErrorConstant.Point.ERROR_POINT_ACCOUNT_NOT_ACCTIVATED_20007, "积分账户未激活");
		}
		if(CommonUtils.isNotEmpty(pointAccountMap)){
			accountId = CommonUtils.objectToLong(pointAccountMap.get("pointAccountId"), -1L);
			headMap.put("accoutId", accountId);
			if(CommonUtils.isNotEmpty(pointAccountMap.get("pointTotal"))){//查询积分余额
				pointTotal = (Long)(SqlUtil.getInstance().selectOneString("queryPointBalanceByAccountId", headMap));
				if(null == pointTotal){
					pointTotal = 0L;
				}
				log.info("扣减积分------>mbrId: " + mbrId.intValue() + " ,accoutId: "+accountId+" ,pointTotal: " + pointTotal + " ,所扣积分数: " + transPointValue);
			}
		}else{
			log.info("operateMbrPoint pointAccount is null");
			throw new BusinessException(this, ErrorConstant.Point.ERROR_ACCOUNT_NOT_EXIST_20002, "积分账户不存在");
		}
		if(CommonUtils.isNotBlank(transType)){
			targetVersion = (Long) SqlUtil.getInstance().selectOneString("queryVersionByMbrId", headMap);
			
			/********添加或者扣减积分入口*******/
			addAndCutPoint(sqlMapperList,pointTotal, updateBy, mbrId, transType, transPointValue, adjustReasonCode, isCrm);
			
			//操作积分--积分余额表
			try {
				String postingDateTime = (String)headMap.get("postingDateTime");
				
				/*********操作积分余额********/
				operatePointBalance(sqlMapperList,mbrId, accountId, updateBy,adjustReasonCode,transPointValue,CommonUtils.isNotBlank(postingDateTime)
						?CommonUtils.parseDate(postingDateTime, "yyyyMMdd"):null);
			} catch (ParseException e) {
				log.error(e.getMessage());
				throw new SystemException(this, ErrorBook.OTHER_ERROR, "createMonth日期转换错误");
			}
			//获取操作之后的版本号
			operateAfterVersion = (Long) SqlUtil.getInstance().selectOneString("queryVersionByMbrId", headMap);
			// 版本号不一致，终止操作
			if (!targetVersion.toString().equals(operateAfterVersion.toString())) {
				throw new BusinessException(this,ErrorBook.OTHER_ERROR,"操作会员积分,版本号不一致");
			} else { 
				// 相同，操作继续，版本号加一
				operateAfterVersion += 1;
				headMap.put("version", operateAfterVersion);
				//TODO yj
				/*Integer i = SqlUtil.getInstance().updateOne("updateVersionByMbrId", headMap);
				if(i<=0){
					throw new DatabaseException(this, ErrorBook.OTHER_ERROR, "更新版本号出错");
				}*/
				sqlMapper = SqlMapper.getInstance().sqlId("updateVersionByMbrId").sqlType(TransacOperation.UPDATE).paramMap(headMap).build();
				sqlMapperList.add(sqlMapper);
			}
			tranId = (Long) SqlUtil.getInstance().selectOneString("queryPointTranId", null);
			//设置积分流水
			setPointTransaction(headMap,transactionMap,accountId,tranId, adjustReasonCode, updateBy, transAttribute);
			
			/*Integer transactionResult = SqlUtil.getInstance().insertOne("insertPointTransaction", transactionMap);//插入积分交易流水记录
			
			/***********操作积分明细*********/
			sqlMapper = SqlMapper.getInstance().sqlId("insertPointTransaction").sqlType(TransacOperation.INSERT).paramMap(transactionMap).build();
			sqlMapperList.add(sqlMapper);
			this.setAdjustmentBean(headMap, transactionMap,tranId);
			
			/*Integer res = SqlUtil.getInstance().insertOne("insertPointAdjustment", transactionMap);
			if(res.intValue()>0){
				transactionFlag = true;
			}*/
			
			/***操作积分调整表**/
			sqlMapper = SqlMapper.getInstance().sqlId("insertPointAdjustment").sqlType(TransacOperation.INSERT).paramMap(transactionMap).build();
			sqlMapperList.add(sqlMapper);
			
			int row = SqlUtil.getInstance().transactionAll(sqlMapperList);
			if(row<=0){
				throw new DatabaseException(this, ErrorConstant.ERROR_TRANSACTION_ROLL_BACK_10006, "扣减积分事务提交失败");
			}
			log.info("扣减积分成功...");
			
		}
		/*//操作积分成功并且写流水成功,则返回 1：成功; 
		if(operateFlag&&transactionFlag){
			return ConstantArgs.POINT_OPER_SUCCESS;
		}else{
			return ConstantArgs.POINT_OPER_FAILT;
		}*/
	}

	//设置积分调整信息
	private void setAdjustmentBean(Map<String, Object> headMap,
			Map<String, Object> transactionMap, Long tranId) {
		transactionMap.put("pointTransactionId", tranId);
		transactionMap.put("adjustType", headMap.get("adjustType"));
		transactionMap.put("refSalesTransNO", headMap.get("salesTransNO"));
		transactionMap.put("adjustRemarks", headMap.get("adjustRemarks"));
		transactionMap.put("adjustReasonCode", headMap.get("adjustReasonCode"));
		transactionMap.put("productCode", headMap.get("partNumber"));
		transactionMap.put("createBy", "MEMBER API");
		transactionMap.put("createTime", new Date());
	}

	//设置积分流水
	private void setPointTransaction(Map<String, Object> headMap,
			Map<String, Object> transactionMap, Long accountId, Long tranId,
			String adjustReasonCode, String updateBy, String transAttribute) throws ExceptionAbstract {
		transactionMap.put("pointTransactionId", tranId);
		transactionMap.put("accountId", accountId);
		transactionMap.put("transType", headMap.get("transType"));
		
		Map<String,Object> mbrshipMap = null;
		Map<String,Object> mbrMap = null;
		if(CommonUtils.isBlank((String)headMap.get("mbrshipCd"))){
			if (!CommonUtils.isNotEmpty(headMap.get("mbrId"))) {
				mbrMap = SqlUtil.getInstance().selectOne("queryMbrByMbrId", headMap);
				if(CommonUtils.isNotEmpty(mbrMap)){
					mbrMap.put("mbrshipCd", mbrMap.get("defaultMbrshipCd"));//根据默认会籍编码查询会籍信息
					mbrshipMap = SqlUtil.getInstance().selectOne("queryMbrShipByMbrshipCd", mbrMap);
					transactionMap.put("csn", mbrshipMap.get("mbrId"));
					transactionMap.put("mbrshipId", mbrshipMap.get("mbrshipId"));
					transactionMap.put("mbrshipCd", mbrshipMap.get("oldMbrshipCd"));
				}
			}
		}else{
			mbrshipMap = SqlUtil.getInstance().selectOne("queryMbrShipByMbrshipCd", mbrMap);
			transactionMap.put("csn", mbrshipMap.get("mbrId"));
			transactionMap.put("mbrshipId", mbrshipMap.get("mbrshipId"));
			transactionMap.put("mbrshipCd", headMap.get("mbrshipCd"));
		}
		
		if (adjustReasonCode.equals(ConstantArgs.LOY_TXN_TYPE_CD_REDEMPTION)) {
			transactionMap.put("transPointValue", Tools.addBearPoints(CommonUtils.objectToLong(headMap.get("points"), 0L)));
		} else if (adjustReasonCode
				.equals(ConstantArgs.LOY_TXN_TYPE_CD_ACCRUAL)) {
			transactionMap.put("transPointValue",CommonUtils.objectToLong(headMap.get("points"), 0L));
		}
		transactionMap.put("transAttribute", transAttribute);
		transactionMap.put("transStatus", headMap.get("transStatus"));
		transactionMap.put("createBy", updateBy);
		transactionMap.put("updateBy", updateBy);
		transactionMap.put("crmTransType",  headMap.get("cTSPointSubType"));
	}

	//操作积分余额
	private void operatePointBalance(List<SqlMapper> sqlMapperList,Long mbrId, Long accountId,
			String updateBy, String adjustReasonCode, Long transPointValue,
			Date expirydate) throws SystemException {
		boolean flag = false;
		Date newDate;
		Date date = null;
		String newExpirydate = null;
		Map<String,Object> pointBalanceMap = new HashMap<String, Object>();
		pointBalanceMap.put("mbrId", mbrId);
		pointBalanceMap.put("acctId", accountId);
		pointBalanceMap.put("pointBalance", transPointValue);
		pointBalanceMap.put("stus", ConstantArgs.POINT_BALANCE_STUS_USERLESS);
		pointBalanceMap.put("createBy", updateBy);
		pointBalanceMap.put("updateBy", updateBy);
		try {
			newDate = CommonUtils.parseDate(CommonUtils.format(new Date(), "yyyyMMdd"), "yyyyMMdd");
			pointBalanceMap.put("createMonth",newDate);
			if(CommonUtils.isEmpty(expirydate)){
				 Date cur = CommonUtils.getCurrentMonthLastDate();
				 cur = CommonUtils.addYears(cur, 2);
				 date = CommonUtils.parseDate(CommonUtils.format(cur, "yyyyMMdd"), "yyyyMMdd");
				 pointBalanceMap.put("expirydate",date);//过期时间,例如今天20150907,则过期时间则为20170930
			}else{
				 pointBalanceMap.put("expirydate", expirydate);
				 date = expirydate;
				log.info("积分过期时间 expirydate："+expirydate);
			}
		} catch (ParseException e) {
			log.error(e.getMessage());
			throw new SystemException(this, ErrorBook.OTHER_ERROR, "createMonth日期转换错误");
		}
		try {
			if (adjustReasonCode.equals(ConstantArgs.LOY_TXN_TYPE_CD_REDEMPTION)) {   // 减
				log.info("会员Id :"+mbrId);
				log.info("会员帐号  ："+accountId);
				log.info("操作积分  ："+transPointValue);
				log.info("修改人 ："+updateBy);
				
				Map inMap = new HashMap();
				inMap.put("mbrId", mbrId);
				List<Map<String, Object>> dataList = SqlUtil.getInstance().selectList("queryUseredPointBalanceByMbrId", inMap);
				
				/************扣减积分余额***********/
				cutPointByBalance(sqlMapperList,dataList,transPointValue);//根据积分余额扣减积分
			}else if (adjustReasonCode.equals(ConstantArgs.LOY_TXN_TYPE_CD_ACCRUAL)) { //加		
				
				/************添加积分余额***********/
				addPointByBalance(sqlMapperList, mbrId, transPointValue, accountId, updateBy,date);			
			}
		} catch (Exception e) {
			log.error("add or cut balance error", e);
			throw new SystemException(this, ErrorBook.OTHER_ERROR, "operatePointBalance失败");
		}
	}

	//添加积分
	private void addPointByBalance(List<SqlMapper> sqlMapperList,Long mbrId, Long transPointValue,
			Long accountId, String updateBy, Date expiryDate) throws ExceptionAbstract {
		log.info("addPointByBalance begin()...");
		log.info("会员Id :"+mbrId);
		log.info("会员帐号  ："+accountId);
		log.info("操作积分  ："+transPointValue);
		log.info("修改人 ："+updateBy);
		AssertUtils.assertNull(expiryDate);
		Integer result = 0;
		Long pointBalance = 0L;
		SqlMapper sqlMapper = null;
		Map<String, Object> pointBalanceMap = isHasPointBalanceOnMonth(mbrId, expiryDate);//积分余额记录
		if (pointBalanceMap != null) {
			log.info("存在当月积分余额 [id:"+pointBalanceMap.get("pointBalanceId")+"] 当前积分 :"+pointBalanceMap.get("pointBalance")+"  createMonth: "+pointBalanceMap.get("createMonth"));
			pointBalanceMap.put("updateBy", updateBy);
			pointBalance = CommonUtils.objectToLong(pointBalanceMap.get("pointBalance"), -1L);
			pointBalanceMap.put("pointBalance", pointBalance+transPointValue);
			//TODO yj
			log.info("更新当月积分 id:"+pointBalanceMap.get("pointBalanceId")+" 更新后积分:"+pointBalanceMap.get("pointBalance"));
			sqlMapper = SqlMapper.getInstance().sqlId("updatePointBalanceByBalanceId").sqlType(TransacOperation.UPDATE).paramMap(pointBalanceMap).build();
			sqlMapperList.add(sqlMapper);
			/*result = SqlUtil.getInstance().updateOne("updatePointBalanceByBalanceId", pointBalanceMap);*/
		}else{
			log.info("不存在当月积分余额 则新增...");
			pointBalanceMap = new HashMap<String, Object>();
			pointBalanceMap.put("accountId", accountId);
			pointBalanceMap.put("pointBalance", transPointValue);
			pointBalanceMap.put("stus", ConstantArgs.POINT_BALANCE_STUS_USERLESS);
			pointBalanceMap.put("createBy", updateBy);
			pointBalanceMap.put("expirydate", CommonUtils.format(expiryDate, "yyyy-MM-dd"));
			pointBalanceMap.put("mbrId", mbrId);
			//TODO yj
			/*result = SqlUtil.getInstance().insertOne("insertPointBalance", pointBalanceMap);*/
			log.info("新增一条本月积分余额   新增后积分:"+pointBalanceMap.get("pointBalance"));
			sqlMapper = SqlMapper.getInstance().sqlId("insertPointBalance").sqlType(TransacOperation.INSERT).paramMap(pointBalanceMap).build();
			sqlMapperList.add(sqlMapper);
		}
		/*if(result.intValue() <= 0){
			log.error("本地积分操作时异常 ！ 积分返还失败！");
			throw new DatabaseException(this,ErrorBook.OTHER_ERROR,"添加积分余额记录失败");
		}else{
			return true;
		}*/
	}
	
	//是否有积分余额记录
	private Map<String, Object> isHasPointBalanceOnMonth(Long mbrId,Date expirydate) throws ExceptionAbstract {
		if(expirydate == null)
			throw new NullPointerException("isHasNodeOnMonth expirydate is null!");
		
		Map inMap = new HashMap();
		inMap.put("mbrId", mbrId);
		List<Map<String, Object>> pointBalanceMap = SqlUtil.getInstance().selectList("queryPointBalanceOnMonthByMbrId", inMap);
		if(null == pointBalanceMap || pointBalanceMap.size() <= 0){
			return null;
		}
		
		Calendar c1 = Calendar.getInstance();
		Calendar c2 = Calendar.getInstance();
		for(Map<String, Object> tempPointBalanceMap:pointBalanceMap){
			if(CommonUtils.isEmpty(tempPointBalanceMap)){
				return null;
			}else{
				//try {
					c1.setTime((Timestamp)tempPointBalanceMap.get("expirydate"));
					c2.setTime(expirydate);
				/*} catch (ParseException e) {
					log.error(e.getMessage());
					throw new SystemException(this, ErrorBook.OTHER_ERROR, "expirydate转换错误");
				}*/
				if(c1.get(Calendar.YEAR) == c2.get(Calendar.YEAR) && c1.get(Calendar.MONTH) == c2.get(Calendar.MONTH) && c1.get(Calendar.DATE) == c2.get(Calendar.DATE))
					return tempPointBalanceMap;
			}
		}
		return null;
	}

	//根据积分余额扣减积分
	private void cutPointByBalance(List<SqlMapper> sqlMapperList,List<Map<String, Object>> dataList,
			Long transPointValue) throws ExceptionAbstract {
		log.info("cutPointByBalance begin()...");
		log.info("dataList: " + dataList);
		log.info("transPointValue: " + transPointValue);
		int successCount = 0;
		int count = 0;
		Map<String,Object> pointBalanceMap =  null;
		SqlMapper sqlMapper = null;
		for(int i=0,len=dataList.size();i<len;i++){
			pointBalanceMap = dataList.get(i);
			Long currentPoint = CommonUtils.objectToLong(pointBalanceMap.get("pointBalance"), -1L);
			if(currentPoint.intValue() == 0){
				log.info("当前积分为0,跳过操作");
				continue;
			}
			if(CommonUtils.comparison(currentPoint.toString(),transPointValue.toString()) <0){//当前积分小于要扣除的积分时,给当前积分置0
				transPointValue = transPointValue - currentPoint;
				pointBalanceMap.put("pointBalance", 0L);
				/*Integer result = SqlUtil.getInstance().updateOne("updatePointBalanceByBalanceId", pointBalanceMap);
				if(result.intValue()>0){//操作成功时,成功次数加1
					successCount++;
				}*/
				sqlMapper = SqlMapper.getInstance().sqlId("updatePointBalanceByBalanceId").sqlType(TransacOperation.UPDATE).paramMap(pointBalanceMap).build();
				sqlMapperList.add(sqlMapper);
				log.info("扣减 帐号余额表  第"+(i+1)+"笔积分 id:["+pointBalanceMap.get("pointBalanceId")+"] 当前积分:"+currentPoint +" 扣完积分： 0");
			}else{//开始扣减
				Long lastPoint = currentPoint - transPointValue;//剩余积分
				pointBalanceMap.put("pointBalance", lastPoint);
				//TODO yj
				/*Integer result = SqlUtil.getInstance().updateOne("updatePointBalanceByBalanceId", pointBalanceMap);
				if(result.intValue()>0){
					successCount++;
				}*/
				sqlMapper = SqlMapper.getInstance().sqlId("updatePointBalanceByBalanceId").sqlType(TransacOperation.UPDATE).paramMap(pointBalanceMap).build();
				sqlMapperList.add(sqlMapper);
				transPointValue = transPointValue - currentPoint;//????? TODO
				log.info("扣减 帐号余额表  第"+(i+1)+"比积分 id:["+pointBalanceMap.get("pointBalanceId")+"]  当前积分:"+currentPoint +" 扣完积分： "+lastPoint);
			}
			if(transPointValue<=0){
				break;
			}
		}
	}

	// 集团积分扣减
	private Map<String, Object> crmCutPoint(Map<String, Object> headMap,Map<String, Object> bodyMap) {
		log.info("crmCutPoint begin()...");
		return null;
	}

	/**
	 * 进行积分加减操作的方法
	 * 
	 * @param pointTotal
	 *            总积分
	 * @param updateBy
	 *            更新人员
	 * @param mbrId
	 *            会员Id
	 * @param transType
	 *            扣减类型
	 * @param transPointValue
	 *            积分变更值
	 * @param adjustReasonCode
	 *            积分调节状态码
	 * @param isCrm
	 *            是否集团
	 * @return
	 * @throws ExceptionAbstract
	 * @throws PointServiceException
	 */
	@SuppressWarnings("unused")
	private void addAndCutPoint(List<SqlMapper> sqlMapperList,Long pointTotal, String updateBy, Long mbrId,
			String transType, Long transPointValue, String adjustReasonCode,
			boolean isCrm) throws ExceptionAbstract {
		log.info("PointFactory addAndCutPoint begin()...");
		log.info("pointTotal: " + pointTotal + ",mbrId: "
				+ ",transPointValue: " + transPointValue);
		log.info("isCrm: " + isCrm + ",adjustReasonCode: " + adjustReasonCode);
		AssertUtils.assertNull(new Object[] { pointTotal, mbrId,
				transPointValue, adjustReasonCode },
				"mbrId,pointTotal,transPointValue,adjustReasonCode其中不能有空值");
		Integer result = 0;
		Long targePoint = pointTotal;
		Map<String, Object> pointAccountMap = new HashMap<String, Object>();
		SqlMapper sqlMapper = null;
		if (CommonUtils.isNotBlank(pointTotal.toString())
				&& CommonUtils.isNotBlank(transPointValue.toString())) {
			if (adjustReasonCode
					.equals(ConstantArgs.LOY_TXN_TYPE_CD_REDEMPTION)) {// 进行积分扣减
				if (isCrm) {// 集团
					targePoint = pointTotal - transPointValue;
				} else {
					if (CommonUtils.comparison(targePoint.toString(),
							transPointValue.toString()) >= 0) {// 如果总积分大于变更积分,就执行扣减
						targePoint = pointTotal - transPointValue;
					} else {// 否则就提示积分不足
						/*return ConstantArgs.POINT_OPER_EMPTY;// 返回-1
*/						throw new BusinessException(this, ErrorConstant.Point.ERROR_CUT_POINTS_LESS_THAN_ZERO_20008, "积分不足");
					}
				}
			} else if (adjustReasonCode
					.equals(ConstantArgs.LOY_TXN_TYPE_CD_ACCRUAL)) {// 增加积分
				targePoint = pointTotal + transPointValue;
			}
		}
		// 如果实际积分总额和操作完的积分总额不等,则说明积分扣减或者增加成功,更新积分账户
		if (CommonUtils
				.comparison(targePoint.toString(), pointTotal.toString()) != 0) {
			pointAccountMap.put("pointTotal", targePoint);
			pointAccountMap.put("updateBy", updateBy);
			pointAccountMap.put("mbrId", mbrId);
			/*result = SqlUtil.getInstance().updateOne("updatePointAccoount",
					pointAccountMap);*/
			sqlMapper = SqlMapper.getInstance().sqlId("updatePointAccoount").sqlType(TransacOperation.UPDATE).paramMap(pointAccountMap).build();
			sqlMapperList.add(sqlMapper);
		}
		/*if (result > 0) {// 如果积分账户信息更新成功,则返回操作成功
			return ConstantArgs.POINT_OPER_SUCCESS;
		}
		return ConstantArgs.POINT_OPER_FAILT;*/
	}
}
